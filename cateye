#!/bin/bash

cateyeversion="5.1.0"
cateyechanges="\e[32m[+]\e[0m Code improvements and bug fixes\n"

# Check if running with sudo
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root" 
    exit 1
fi

# Extract command and package name from argument
command="$1"

download_and_install() {
    local url="$1"
    printf "\e[35m [+]\e[0m download $url\n"
    local filename
    filename=$(basename "$url")
    curl -LO "$url" || { printf "\e[31m [!]\e[0m Failed to download: $url\n"; exit 1; }
    printf "\e[35m [+]\e[0m unzip: $filename\n"
    tar -xzf "$filename" || { printf "\e[31m [!]\e[0m Failed to extract $filename\n"; rm "$filename"; exit 1; }
    rm "$filename"
    # Assuming the extracted folder contains binaries to add to system bin directory
    printf "\e[32m [+]\e[0m installing file: $filename\n"
    sudo cp -r "./$package_name" "/usr/local/bin/"
    rm "./$package_name"
    printf "\e[32m [+]\e[0m setting file: $filename\n"
    chmod +x "/usr/local/bin/$package_name"
    printf "\e[34m[+]\e[0m installed: $package_name\n"
}

install_dependencies() {
    local json_url="$1"
    local pkg_json
    pkg_json=$(curl -sS "$json_url") || { printf "\e[31m [!]\e[0m Failed to retrieve JSON File from $json_url\n"; exit 1; }
    local package_name
    package_name=$(echo "$pkg_json" | jq -r '.name')
    local dependencies
    dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
    for url in $dependencies; do
        printf "\e[34m[+]\e[0m Found Dependencies in JSON File: $url\n"
        install_dependencies "$url"
    done

    local os_id
    os_id=$(get_os)

    local target_key="$os_id"
    local url_of_software_for_this_os
    url_of_software_for_this_os=$(echo "$pkg_json" | jq -r ".$target_key")

    if [ -n "$url_of_software_for_this_os" ]; then
        printf "\e[34m[+]\e[0m Found Dependencies in JSON File: $url_of_software_for_this_os\n"
        download_and_install "$url_of_software_for_this_os"
    else
        local main_url
        main_url=$(echo "$pkg_json" | jq -r '.url')
        printf "\e[34m[+]\e[0m Found Dependencies in JSON File: $main_url\n"
        download_and_install "$main_url"
    fi

    printf "\e[34m==>\e[0m Running setup script for '$url2'...\n"

    local runscript=true
    local scripts
    scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n"; runscript=false; }

    case $runscript in
        true)
            for script in $scripts; do
                printf "\e[34m[+]\e[0m Script: $script\n"
                eval "$script"
            done
            ;;
        *)
            printf "\e[34m==>\e[0m Skip Running Install script.\n"
            ;;
    esac
}

get_os() {
    local os_type="other"
    if [[ "$(uname)" == "Darwin" ]]; then
        os_type="macos"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
        os_type="linux"
    fi

    local os_version="unknown"
    if [[ "$os_type" == "macos" ]]; then
        os_version=$(sw_vers -productVersion)
        os_version=$(echo "$os_version" | awk -F. '{print $1}')
    elif [[ "$os_type" == "linux" ]]; then
        if [ -e /etc/os-release ]; then
            os_version=$(grep "VERSION_ID" /etc/os-release | cut -d '"' -f 2)
            os_version=$(echo "$os_version" | sed 's/VERSION_ID=//')
            os_version=$(echo "$os_version" | awk -F. '{print $1}')
        else
            os_version="unknown"
        fi
    fi

    echo "$os_type$os_version"
}

get_latest_version() {
    local latest_version
    latest_version=$(curl -sS https://dl.kamu.jp/cateye/version.html)
    echo "$latest_version"
}

case "$command" in
    "update")
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            echo "cateye V$cateyeversion (Up to date)"
            printf "\e[31m[!] No update. \e[0m\n"
        else
            echo "cateye V$cateyeversion (latest: V$latest_version)"
            echo "Updating Cateye..."
            current_script="$0"
            echo "Downloading latest script..."
            curl -sS -o "$current_script" "https://dl.kamu.jp/cateye/cateye" || { printf "\e[31m[!] Failed to download latest script\e[0m\n"; exit 1; }
            chmod +x "$current_script"
            echo "Updated successfully."
        fi
        ;;
    "version")
        latest_version=$(get_latest_version)
        os_id=$(get_os)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            echo "cateye V$cateyeversion (Up to date)"
        else
            echo "cateye V$cateyeversion (latest: V$latest_version)"
        fi
        printf "\e[34m==>\e[0m OS\n"
        echo "$os_id"
        printf "\e[34m==>\e[0m PATH of Cateye\n"
        echo "$0"
        printf "\e[34m==>\e[0m Changes of This version\n"
        printf "$cateyechanges"
        ;;
    "install")
        if [ -n "$2" ]; then
            printf "\e[34m[+]\e[0m The number of arguments is normal. Start the installation.\n"
        else
            printf "\e[31m[!]\e[0m Not enough arguments\n"
            exit 1
        fi

        os_id=$(get_os)
        package_name="$2"
        printf "\e[34m==>\e[0m Running...\n"
        json_url="https://dl.kamu.jp/$package_name/pkg.json"
        pkg_json=$(curl -sS "$json_url") || { printf "\e[31m [!]\e[0m Failed to retrieve JSON File from $json_url\n"; exit 1; }
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            printf "\e[34m[+]\e[0m Found external JSON File in JSON File: $url\n"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            printf "\e[34m[+]\e[0m Found Main url in JSON File: $url_of_software_for_this_os\n"
            download_and_install "$url_of_software_for_this_os"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            printf "\e[34m[+]\e[0m Found Main url in JSON File: $main_url\n"
            download_and_install "$main_url"
        fi
        printf "\e[34m==>\e[0m Running setup script for '$package_name'...\n"
        runscript=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n"; runscript=false; }
        case $runscript in
            true)
                for script in $scripts; do
                    printf "\e[34m[+]\e[0m Script: $script\n"
                    eval "$script"
                done
                ;;
            *)
                printf "\e[34m==>\e[0m Skip Running Install script.\n"
                ;;
        esac
        printf "\e[34m==>\e[0m Done.\n"
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            printf "\e[33m[-]\e[0m A newer version is available: V$latest_version\n"
            printf "\e[33m[-]\e[0m Consider running: sudo cateye update\n"
        fi
        printf "\e[34m[+]\e[0m Installation of $package_name and that dependencies completed successfully\n"
        ;;
    "url")
        package_name="$2"
        if [ -n "$2" ] && [ -n "$3" ]; then
            printf "\e[34m[+]\e[0m The number of arguments is normal. Start the installation from the URL.\n"
        else
            printf "\e[31m[!]\e[0m Not enough arguments\n"
            exit 1
        fi
        package_url="$3"
        printf "\e[34m==>\e[0m Running...\n"
        json_url="$package_url"
        pkg_json=$(curl -sS "$json_url") || { printf "\e[31m [!]\e[0m Failed to retrieve JSON File from $json_url\n"; exit 1; }
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            printf "\e[34m[+]\e[0m Found external JSON File in JSON File: $url\n"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            printf "\e[34m[+]\e[0m Found Main url in JSON File: $url_of_software_for_this_os\n"
            download_and_install "$url_of_software_for_this_os"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            printf "\e[34m[+]\e[0m Found Main url in JSON File: $main_url\n"
            download_and_install "$main_url"
        fi
        printf "\e[34m==>\e[0m Running setup script for '$package_name'...\n"
        runscript=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n"; runscript=false; }
        case $runscript in
            true)
                for script in $scripts; do
                    printf "\e[34m[+]\e[0m Script: $script\n"
                    eval "$script"
                done
                ;;
            *)
                printf "\e[34m==>\e[0m Skip Running Install script.\n"
                ;;
        esac
        printf "\e[34m==>\e[0m Done.\n"
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            printf "\e[33m[-]\e[0m A newer version is available: V$latest_version\n"
            printf "\e[33m[-]\e[0m Consider running: sudo cateye update\n"
        fi
        printf "\e[34m[+]\e[0m Installation of $package_name and that dependencies completed successfully\n"
        ;;
    *)
        printf "\e[31m[!]\e[0m Unknown command\n"
        echo " "
        printf "\e[34m==>\e[0m Usage\n"
        echo "Update:"
        echo " sudo cateye update"
        echo "Install from Kamu Dev:"
        echo " sudo cateye install [package name]"
        echo "Install from Other Site:"
        echo " sudo cateye url [package name] [url of Kamu Package JSON]"
        echo "Show version:"
        echo " sudo cateye version"
        ;;
esac
