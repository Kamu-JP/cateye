#!/bin/bash

cateyeversion="5.4.1"
cateyechanges="URL install is now not need to specify the package name!"

# Extract command and package name from argument
command="$1"

download_and_install() {
    local url="$1"
    logging "info" "Download $url" "cyan"
    local filename
    filename=$(basename "$url")
    curl -LO "$url" || { logging "error" "Failed to download: $url" "red"; exit 1; }
    logging "info" "Unzip: $filename" "cyan"
    tar -xzf "$filename" || { logging "error" "Failed to extract $filename" "red"; rm "$filename"; exit 1; }
    rm "$filename"
    # Assuming the extracted folder contains binaries to add to system bin directory
    logging "info" "Installing file: $filename" "cyan"
    sudo cp -r "./$package_name" "/usr/local/bin/" || { logging "error" "Failed to install $filename" "red"; rm "./$package_name"; exit 1; }
    rm "./$package_name"
    logging "info" "Setting file: $filename" "cyan"
    chmod +x "/usr/local/bin/$package_name"
    printf "\e[34m[+]\e[0m installed: $package_name\n"
    logging "info" "installed: $package_name" "cyan"
}

logging() {

    local mode="$1"
    local message="$2"
    local color="$3"
    local color_code
    case $color in
        "red")
            color_code="31m"
            ;;
        "orange")
            color_code="33m"
            ;;
        "yellow")
            color_code="33m"
            ;;
        "green")
            color_code="32m"
            ;;
        "cyan")
            color_code="36m"
            ;;
        "blue")
            color_code="34m"
            ;;
        "purple")
            color_code="35m"
            ;;
        *)
            color_code="0m"
            ;;
    esac
    case $mode in
        "step")
            printf "\e[$color_code==>\e[0m $message\n"
            ;;
        "info")
            printf "\e[$color_code[+]\e[0m $message\n"
            ;;
        "warn")
            printf "\e[$color_code[-]\e[0m $message\n"
            ;;
        "error")
            printf "\e[$color_code[!]\e[0m $message\n"
            ;;
        *)
            printf "\e[$color_code[!]\e[0m Internal script error, unknown mode: $mode\n"
            exit 1
            ;;
    esac
}

install_dependencies() {
    local json_url="$1"
    local pkg_json
    pkg_json=$(curl -sS "$json_url") || { printf "\e[31m [!]\e[0m Failed to retrieve JSON File from $json_url\n"; exit 1; }
    local package_name
    package_name=$(echo "$pkg_json" | jq -r '.name')
    local dependencies
    dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
    for url in $dependencies; do
        logging "info" "Found Dependencies in JSON File: $url" "cyan"
        install_dependencies "$url"
    done

    local os_id
    os_id=$(get_os)

    local target_key="$os_id"
    local url_of_software_for_this_os
    url_of_software_for_this_os=$(echo "$pkg_json" | jq -r ".$target_key")

    if [ -n "$url_of_software_for_this_os" ]; then
        logging "info" "Found Dependencies in JSON File: $url_of_software_for_this_os" "cyan"
        download_and_install "$url_of_software_for_this_os"
    else
        local main_url
        main_url=$(echo "$pkg_json" | jq -r '.url')
        logging "info" "Found Dependencies in JSON File: $main_url" "cyan"
        download_and_install "$main_url"
    fi

    logging "step" "Running setup script for '$url2'..." "cyan"

    local runscript=true
    local scripts
    scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n" "red"; runscript=false; }

    case $runscript in
        true)
            for script in $scripts; do
                logging "step" "Running setup script: '$script'..." "cyan"
                eval "$script"
            done
            ;;
        *)
            logging "step" "Skip Running Install script: all script" "yellow"
            ;;
    esac
}

get_os() {
    local os_type="other"
    if [[ "$(uname)" == "Darwin" ]]; then
        os_type="macos"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
        os_type="linux"
    fi

    local os_version="unknown"
    if [[ "$os_type" == "macos" ]]; then
        os_version=$(sw_vers -productVersion)
        os_version=$(echo "$os_version" | awk -F. '{print $1}')
    elif [[ "$os_type" == "linux" ]]; then
        if [ -e /etc/os-release ]; then
            os_version=$(grep "VERSION_ID" /etc/os-release | cut -d '"' -f 2)
            os_version=$(echo "$os_version" | sed 's/VERSION_ID=//')
            os_version=$(echo "$os_version" | awk -F. '{print $1}')
        else
            os_version="unknown"
        fi
    fi

    echo "$os_type$os_version"
}

get_latest_version() {
    local latest_version
    latest_version=$(curl -sS https://dl.kamu.jp/cateye/version.html)
    echo "$latest_version"
}

case "$command" in
    "update")
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            echo "Current: cateye V$cateyeversion (Up to date)"
            logging "info" "No update." "cyan"
        else
            echo "Current: cateye V$cateyeversion (latest: V$latest_version)"
            logging "info" "Updating Cateye: $current_script" "cyan"
            current_script="$0"
            logging "info" "Downloading latest script to $current_script" "cyan"
            curl -sS -o "$current_script" "https://dl.kamu.jp/cateye/cateye" || { printf "\e[31m[!] Failed to download latest script\e[0m\n"; exit 1; }
            chmod +x "$current_script"
            logging "info" "Updated successfully." "cyan"
        fi
        ;;
    "version")
        latest_version=$(get_latest_version)
        os_id=$(get_os)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            echo "cateye V$cateyeversion (Up to date)"
        else
            echo "cateye V$cateyeversion (latest: V$latest_version)"
        fi
        logging "step" "OS" "purple"
        echo "OS: $os_id"
        logging "step" "PATH of Cateye" "purple"
        echo "PATH: $0"
        logging "step" "Update of This version" "purple"
        logging "info" "$cateyechanges" "cyan"
        ;;
    "install")
        if [ -n "$2" ]; then
            logging "info" "The number of arguments is normal. Start the installation." "cyan"
        else
            logging "error" "Not enough arguments" "red"
            exit 1
        fi

        os_id=$(get_os)
        package_name="$2"
        logging "step" "Start the installation." "purple"
        json_url="https://dl.kamu.jp/$package_name/pkg.json"
        pkg_json=$(curl -sS "$json_url") || { logging "error" "Failed to retrieve JSON File from $json_url"; exit 1; }
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            logging "info" "Found external JSON File in JSON File: $url" "cyan"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            logging "info" "Found Main url in JSON File: $url_of_software_for_this_os" "cyan"
            download_and_install "$url_of_software_for_this_os"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            logging "info" "Found Main url in JSON File: $main_url" "cyan"
            download_and_install "$main_url"
        fi
        logging "step" "Running setup script for '$package_name'..." "purple"
        runscript=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n"; runscript=false; }
        case $runscript in
            true)
                for script in $scripts; do
                    logging "step" "Running setup script: '$script'..." "purple"
                    eval "$script"
                done
                ;;
            *)
                logging "step" "Skip Running Install script." "yellow"
                ;;
        esac
        logging "step" "Done." "purple"
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            logging "warn" "A newer version is available: V$latest_version" "yellow"
            logging "warn" "Consider running: cateye update" "yellow"
        fi
        logging "info" "Installation of $package_name and that dependencies completed successfully" "cyan"
        ;;
    "url")
        if [ -n "$2" ]; then
            logging "info" "The number of arguments is normal. Start the installation from the URL." "cyan"
        else
            logging "error" "Not enough arguments" "red"
            exit 1
        fi
        package_url="$2"
        logging "step" "Running from the URL." "purple"
        json_url="$package_url"
        pkg_json=$(curl -sS "$json_url") || { logging "error" "Failed to retrieve JSON File from $json_url" "red"; exit 1; }
        package_name=$(echo "$pkg_json" | jq -r '.name')
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            logging "info" "Found external JSON File in JSON File: $url" "cyan"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            logging "info" "Found Main url in JSON File: $url_of_software_for_this_os" "cyan"
            download_and_install "$url_of_software_for_this_os"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            logging "info" "Found Main url in JSON File: $main_url" "cyan"
            download_and_install "$main_url"
        fi
        logging "step" "Running setup script for '$package_name'..." "purple"
        runscript=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { printf "\e[31m[!]\e[0m Skip this because there is no setup script.\n"; runscript=false; }
        case $runscript in
            true)
                for script in $scripts; do
                    logging "step" "Running setup script: '$script'..." "purple"
                    eval "$script"
                done
                ;;
            *)
                logging "step" "Skip Running Install script." "yellow"
                ;;
        esac
        logging "step" "Done." "purple"
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            logging "warn" "A newer version is available: V$latest_version" "yellow"
            logging "warn" "Consider running: cateye update" "yellow"
        fi
        logging "info" "Installation of $package_name and that dependencies completed successfully" "cyan"
        ;;
    "cedk")
        logging "step" "Running Cateye Development Kit..."
        echo "Cateye Development Kit"
        echo "-------------------------"
        echo "Please enter the following information:"

        read -p "Package Name: " package_name
        read -p "Package URL: " package_url

        echo "Dependencies (separated by space, press enter when done):"
        while read -r line; do
            dependencies+=("$line")
        done

        echo "Scripts (separated by space, press enter when done):"
        while read -r line; do
            scripts+=("$line")
        done

        cat <<EOF > kamu_package.json
{
  "name": "$package_name",
  "url": "$package_url",
  "dependencies": [
    $(printf '"%s",' "${dependencies[@]}")
  ],
  "script": [
    $(printf '"%s",' "${scripts[@]}")
  ]
}
EOF
        
        logging "info" "Kamu Package JSON has been created."
        logging "info" "Please upload kamu_package.json to your server and run the following command."
        logging "info" "cateye url [package name] [url of kamu_package.json]"

        logging "step" "Done."

        ;;

    *)
        logging "error" "Unknown command" "red"
        echo " "
        logging "step" "Usage" "purple"
        echo "Update:"
        echo " cateye update"
        echo "Run CEDK(Cateye Development Kit):"
        echo " cateye cedk"
        echo "Install from Kamu Dev:"
        echo " cateye install [package name]"
        echo "Install from Other Site:"
        echo " cateye url [url of Kamu Package JSON]"
        echo "Show version:"
        echo " cateye version"
        ;;
esac
