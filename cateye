#!/bin/bash

cateyeversion="5.24.0"
cateyechanges="Added doctor command"

# Extract command and package name from argument
command="$1"

download_and_install() {
    local url="$1"
    logging "info" "Download $url"
    local filename
    filename=$(basename "$url")
    curl -LO "$url" || { logging "error" "Failed to download: $url" ; exit 1; }
    logging "info" "Unzip: $filename"
    tar -xzf "$filename" || { logging "error" "Failed to extract $filename" ; rm "$filename"; exit 1; }
    rm "$filename"
    # Assuming the extracted folder contains binaries to add to system bin directory
    logging "info" "Installing file: $filename"
    sudo cp -r "./$package_name" "/usr/local/bin/" || { logging "error" "Failed to install $filename" ; rm "./$package_name"; exit 1; }
    rm "./$package_name"
    logging "info" "Setting file: $filename"
    chmod +x "/usr/local/bin/$package_name"
}

logging() {

    local mode="$1"
    local message="$2"
    local color="$3"
    local color_code
    case $color in
        "red")
            color_code="31m"
            ;;
        "green")
            color_code="32m"
            ;;
        "orange")
            color_code="33m"
            ;;
        "yellow")
            color_code="33m"
            ;;
        "cyan")
            color_code="36m"
            ;;
        "blue")
            color_code="34m"
            ;;
        "purple")
            color_code="35m"
            ;;
        *)

            color_code="0m"

            case $mode in
                "step")
                    color_code="34m"
                    ;;
                "info")
                    color_code="32m"
                    ;;
                "warn")
                    color_code="33m"
                    ;;
                "error")
                    color_code="31m"
                    ;;
                "checkmark")
                    color_code="32m"
                    ;;
                "xmark")
                    color_code="31m"
                    ;;
            esac

            ;;
    esac
    case $mode in
        "step")
            printf "\e[$color_code>\e[0m $message\n"
            ;;
        "info")
            printf "\e[$color_code[+]\e[0m $message\n"
            ;;
        "warn")
            printf "\e[$color_code[-]\e[0m $message\n"
            ;;
        "error")
            printf "\e[$color_code\xE2\x9C\x98\e[0m $message\n"
            ;;
        "checkmark")
            printf "\e[$color_code\xE2\x9C\x94\e[0m $message\n"
            ;;
        "xmark")
            printf "\e[$color_code\xE2\x9C\x98\e[0m $message\n"
            ;;
        *)
            printf "\e[$color_code[!]\e[0m Internal script error, unknown mode: $mode\n"
            exit 1
            ;;
    esac
}

install_dependencies() {

    local package_url
    local json_url
    local pkg_json
    local package_name
    local dependencies
    local os_id
    local target_key
    local result
    local url_of_software_for_this_os
    local main_url
    local runscript
    local scripts
    local script
    
    package_url="$1"
    json_url="$package_url"
    pkg_json=$(curl -sS "$json_url") || { logging "error" "Failed to retrieve JSON File from $json_url" ; exit 1; }
    package_name=$(echo "$pkg_json" | jq -r '.name')
    dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
    for url in $dependencies; do
        logging "info" "Found external JSON File in JSON File: $url"
        install_dependencies "$url"
    done
    os_id=$(get_os)
    target_key="$os_id"
    result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
    if [ "$result" == "true" ]; then
        logging "info" "Found dependencies url in JSON File: $url_of_software_for_this_os"
        download_and_install "$url_of_software_for_this_os"
    else
        main_url=$(echo "$pkg_json" | jq -r '.url')
        logging "info" "Found dependencies url in JSON File: $main_url"
        download_and_install "$main_url"
    fi
    logging "checkmark" "installed dependencies: $package_name"
    logging "step" "Running setup script for '$package_name'..." 
    runscript=true
    allow_running_script=true
    scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { logging "warn" "Skip this because there is no setup script."; runscript=false; }
    case $runscript in
        true)

            for script in $scripts; do
                logging "step" "Running setup script: '$script'..." 
                eval "$script"
            done

            ;;
        *)
            logging "step" "Skip Running Install script." 
            ;;
    esac

    logging "checkmark" "Installed dependencies: $package_name"

}

get_os() {
    local os_type="other"
    if [[ "$(uname)" == "Darwin" ]]; then
        os_type="macos"
    elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
        os_type="linux"
    fi

    local os_version="unknown"
    if [[ "$os_type" == "macos" ]]; then
        os_version=$(sw_vers -productVersion)
        os_version=$(echo "$os_version" | awk -F. '{print $1}')
    elif [[ "$os_type" == "linux" ]]; then
        if [ -e /etc/os-release ]; then
            os_version=$(grep "VERSION_ID" /etc/os-release | cut -d '"' -f 2)
            os_version=$(echo "$os_version" | sed 's/VERSION_ID=//')
            os_version=$(echo "$os_version" | awk -F. '{print $1}')
        else
            os_version="unknown"
        fi
    fi

    echo "$os_type$os_version"
}

get_latest_version() {
    local latest_version
    latest_version=$(curl -sS https://dl.kamu.jp/cateye/version.html)
    echo "$latest_version"
}

case "$command" in
    "update")

        # Check if running with sudo
        if [ $EUID -ne 0 ]; then
            echo "Update command is must be run as root" 
            exit 1
        fi

        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            logging "step" "cateye V$cateyeversion"
            logging "checkmark" "No update."
        else
            logging "step" "Update cateye V$cateyeversion to V$latest_version"
            logging "info" "Updating Cateye: $current_script"
            current_script="$0"
            logging "info" "Downloading latest script to $current_script"
            curl -sS -o "$current_script" "https://dl.kamu.jp/cateye/cateye" || { logging "error" "Failed to download latest script"; exit 1; }
            chmod +x "$current_script"
            logging "checkmark" "Updated successfully."
        fi
        ;;
    "version")
        latest_version=$(get_latest_version)
        os_id=$(get_os)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            logging "step" "cateye V$cateyeversion"
            logging "checkmark" "No update."
        else
            logging "step" "cateye V$cateyeversion"
            logging "warn" "A newer version is available: V$latest_version"
            logging "warn" "Consider running: cateye update" 
        fi
        logging "step" "OS" 
        echo "OS: $os_id"
        logging "step" "PATH of Cateye" 
        echo "PATH: $0"
        logging "step" "Update of current version" 
        logging "info" "$cateyechanges"
        ;;
    "install")

        if [ -n "$2" ]; then
            logging "checkmark" "The number of arguments is normal. Start the installation."
        else
            logging "error" "Not enough arguments" 
            exit 1
        fi

        os_id=$(get_os)
        package_name="$2"
        logging "step" "Start the installation." 
        json_url="https://dl.kamu.jp/$package_name/pkg.json"
        pkg_json=$(curl -sS "$json_url") || { logging "error" "Failed to retrieve JSON File from $json_url"; exit 1; }
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            logging "info" "Found external JSON File in JSON File: $url"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            logging "info" "Found Main url in JSON File: $url_of_software_for_this_os"
            download_and_install "$url_of_software_for_this_os"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            logging "info" "Found Main url in JSON File: $main_url"
            download_and_install "$main_url"
        fi
        logging "step" "Running setup script for '$package_name'..." 
        runscript=true
        allow_running_script=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { logging "warn" "Skip this because there is no setup script."; runscript=false; }
        case $runscript in
            true)

                read -p "Do you want to run the setup script? [y/n]: " isRunScript
                case $isRunScript in
                    y)
                        runscript=true
                        for script in $scripts; do
                            logging "step" "Running setup script: '$script'..." 
                            eval "$script"
                        done
                        ;;
                    n)
                        runscript=false
                        allow_running_script=false
                        logging "step" "Skip Running Install script." 
                        ;;
                    *)
                        logging "error" "Unknown answer, continue the installation with running the setup script." 
                        runscript=true
                        ;;
                esac
                ;;
            *)
                logging "step" "Skip Running Install script." 
                ;;
        esac
        logging "checkmark" "Done." 
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            logging "warn" "A newer version is available: V$latest_version" 
            logging "warn" "Consider running: cateye update" 
        fi

        if [ "$allow_running_script" == "false" ]; then
            logging "warn" "Skiped setup script, because you answered 'n'. if you want to run the setup script, run the following command." 
            logging "warn" "cateye install $package_name" 
        fi

        ;;
    "url")
        if [ -n "$2" ]; then
            logging "info" "The number of arguments is normal. Start the installation from the URL."
        else
            logging "error" "Not enough arguments" 
            exit 1
        fi
        package_url="$2"
        logging "step" "Running from the URL." 
        json_url="$package_url"
        pkg_json=$(curl -sS "$json_url") || { logging "error" "Failed to retrieve JSON File from $json_url" ; exit 1; }
        package_name=$(echo "$pkg_json" | jq -r '.name')
        dependencies=$(echo "$pkg_json" | jq -r '.dependencies | to_entries[] | .value')
        for url in $dependencies; do
            logging "info" "Found external JSON File in JSON File: $url"
            install_dependencies "$url"
        done
        os_id=$(get_os)
        target_key="$os_id"
        result=$(echo "$pkg_json" | jq ". | has(\"$target_key\")")
        if [ "$result" == "true" ]; then
            logging "info" "Found Main url in JSON File: $url_of_software_for_this_os"
            download_and_install "$url_of_software_for_this_os"
            logging "checkmark" "installed: $package_name"
        else
            main_url=$(echo "$pkg_json" | jq -r '.url')
            logging "info" "Found Main url in JSON File: $main_url"
            download_and_install "$main_url"
            logging "checkmark" "installed: $package_name"
        fi

        logging "step" "Running setup script for '$package_name'..." 
        runscript=true
        allow_running_script=true
        scripts=$(echo "$pkg_json" | jq -r '.script | to_entries[] | .value') || { logging "warn" "Skip this because there is no setup script."; runscript=false; }
        case $runscript in
            true)

                read -p "Do you want to run the setup script? [y/n]: " isRunScript
                case $isRunScript in
                    "y")
                        runscript=true
                        for script in $scripts; do
                            logging "step" "Running setup script: '$script'..." 
                            eval "$script"
                        done
                        ;;
                    "n")
                        logging "step" "Skip Running Install script." 
                        runscript=false
                        allow_running_script=false
                        ;;
                    *)
                        logging "error" "Unknown answer, continue the installation with running the setup script." 
                        runscript=true
                        ;;
                esac

                ;;
            *)
                logging "step" "Skip Running Install script." 
                ;;
        esac
        logging "checkmark" "Done." 
        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" != "$latest_version" ]]; then
            logging "warn" "A newer version is available: V$latest_version" 
            logging "warn" "Consider running: cateye update" 
        fi

        if [ "$allow_running_script" == "false" ]; then
            logging "warn" "Skiped setup script, because you answered 'n'. if you want to run the setup script, run the following command." 
            logging "warn" "cateye url $package_url" 
        fi

        ;;

    "doctor")

        logging "step" "Show result of doctor" 
        latest_version=$(get_latest_version)
        warnings=0
        errors=0

        if [[ "$cateyeversion" == "$latest_version" ]]; then
            printf "\e[32m[\xE2\x9C\x94]\e[0m cateye V$cateyeversion\n"
        else
            logging "warn" "cateye V$cateyeversion"
            printf "    \e[33m[-]\e[0m A newer version is available: V$latest_version\n"
            printf "    \e[33m[-]\e[0m Consider running: cateye update\n"
            warnings=$((warnings + 1))
        fi

        if command -v jq &> /dev/null; then
            printf "\e[32m[\xE2\x9C\x94]\e[0m jq\n"
        else
            printf "\e[31m[\xE2\x9C\x98]\e[0m jq\n"
            printf "    \e[31m[\xE2\x9C\x98]\e[0m jq is not installed.\n"
            errors=$((errors + 1))
        fi
        
        logging "checkmark" "Finished: $errors errors, $warnings warnings"

        ;;

    "cedk")
        logging "step" "Running Cateye Development Kit..."
        echo "Cateye Development Kit"
        echo "-------------------------"
        echo "Please enter the following information:"

        read -p "Package Name: " package_name
        read -p "Package URL: " package_url

        echo "Dependencies (separated by space, press enter when done):"
        while read -r line; do
            dependencies+=("$line")
        done

        echo "Scripts (separated by space, press enter when done):"
        while read -r line; do
            scripts+=("$line")
        done

        cat <<EOF > kamu_package.json
{
  "name": "$package_name",
  "url": "$package_url",
  "dependencies": [
    $(printf '"%s",' "${dependencies[@]}")
  ],
  "script": [
    $(printf '"%s",' "${scripts[@]}")
  ]
}
EOF
        
        logging "info" "Kamu Package JSON has been created."
        logging "info" "Please upload kamu_package.json to your server and run the following command."
        logging "info" "cateye url [package name] [url of kamu_package.json]"

        logging "checkmark" "Done."

        ;;

    *)

        latest_version=$(get_latest_version)
        if [[ "$cateyeversion" == "$latest_version" ]]; then
            logging "step" "cateye V$cateyeversion"
            logging "checkmark" "Up to date."
        else
            logging "step" "cateye V$cateyeversion"
            logging "warn" "A newer version is available: V$latest_version"
            logging "warn" "Consider running: cateye update" 
        fi

        echo " "
        logging "step" "Usage" 
        echo "Update:"
        echo " cateye update"
        echo "Run doctor:"
        echo " cateye doctor"
        echo "Install from Kamu Dev:"
        echo " cateye install [package name]"
        echo "Install from Other Site:"
        echo " cateye url [url of Kamu Package JSON]"
        echo "Show version:"
        echo " cateye version"
        ;;
esac
